// Сравните два фрагмента кода.

// 1) Первый использует finally для выполнения кода после try..catch:
try {
//   начать работу
//   работать
} catch (e) {
//   обработать ошибку
} finally {
//   очистить рабочее пространство
}

// 2) Второй фрагмент просто ставит очистку после try..catch:
try {
//   начать работу
//   работать
} catch (e) {
//   обработать ошибку
}
// очистить рабочее пространство


// Нам определённо нужна очистка после работы, неважно возникли ошибки или нет.
// Есть ли здесь преимущество в использовании finally или оба фрагмента кода одинаковы? Если такое преимущество есть, то дайте пример, когда оно проявляется.






/////////////
// В зависимости от кода внутри try. В отличии от просто кода после try/catch блок finally выполнится при любом выходе из предыдущих блоков. Даже через return, continue, break.

for (let i = 0; i < 3; i++){
  try {
    break;
  }
  catch {}
  console.log(i); // не будет исполнено
}

for (let i = 0; i < 3; i++){
  try {
    break;
  }
  finally {
    console.log(i); // 0
  }
}